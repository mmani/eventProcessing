/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. regExpGrammar.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
                           
  static = false;
}

PARSER_BEGIN(regExpGrammar)
package regExParsePkg;

public class regExpGrammar/*@bgen(jjtree)*/implements regExpGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTregExpGrammarState jjtree = new JJTregExpGrammarState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
    regExpGrammar parser = new regExpGrammar(System.in);
	parser.Start();
  }
}

PARSER_END(regExpGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
|  "\r\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < CHOICE : "|" >
| < STAR : "*" >
| < CONCAT : "," >
| < NOT : "!" >
| < OPENPAR : "(" >
| < CLOSEPAR : ")" >
| < COLON : ":" >
}

TOKEN :
{
  < CONSTANT : (~[",","|","+","(",")","!",":"])+ >
}

public SimpleNode Start()        :
{/*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) START */
        try {
/*@egen*/
	expr()
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue("START");
    return jjtn000;
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void expr() :
{
}
{
	term()
    ( concatExpr() | choiceExpr() )*
    {
      // jjtThis.jjtSetValue("EXPR");    }
}

void concatExpr()            :
{/*@bgen(jjtree) #CONCAT( 2) */
  SimpleNode jjtn000 = new SimpleNode(JJTCONCAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #CONCAT( 2) */
        try {
/*@egen*/	< CONCAT >	{	  jjtn000.jjtSetValue("CONCAT");
	}
	term()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
        }
/*@egen*/
}

void choiceExpr()            :
{/*@bgen(jjtree) #CHOICE( 2) */
  SimpleNode jjtn000 = new SimpleNode(JJTCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #CHOICE( 2) */
        try {
/*@egen*/
	< CHOICE >
	{
	  jjtn000.jjtSetValue("CHOICE");
	}
	term()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
          }
        }
/*@egen*/
}

void term() :
{

}
{
  finalTerm() | nestedExpr() | notExpr()
}

void finalTerm()       :
{/*@bgen(jjtree) TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TERM */
  try {
/*@egen*/  element()  {
    jjtn000.jjtSetValue ("UNARY");  }
  [<PLUS> { jjtn000.jjtSetValue ("PLUS"); }]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void nestedExpr() :{}
{  < OPENPAR >
  expr() [ aliasExpr() ]
  < CLOSEPAR >
}

void aliasExpr()           :
{/*@bgen(jjtree) #ALIAS( 2) */
  SimpleNode jjtn000 = new SimpleNode(JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ALIAS( 2) */
  try {
/*@egen*/
  {     jjtn000.jjtSetValue("ALIAS");
   }
  < COLON > element()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
    }
  }
/*@egen*/
}

void notExpr()      :
{/*@bgen(jjtree) NOT */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NOT */
  try {
/*@egen*/  < NOT > { jjtn000.jjtSetValue ("NOT"); }
  term()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void element()          :
{/*@bgen(jjtree) ELEMENT */
        SimpleNode jjtn000 = new SimpleNode(JJTELEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ELEMENT */
        try {
/*@egen*/
	t = <CONSTANT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.jjtSetValue(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}