/* Generated By:JavaCC: Do not edit this line. queryGrammar.java */
package queryParsePkg;

import java.util.*;

public class queryGrammar implements queryGrammarConstants {
  Vector<String> selectVector;
  StringBuilder inputStream;
  StringBuilder patternString;
  Vector<String> predVector;
  StringBuilder windowSize;
  StringBuilder windowType;

  public static void main(String args []) throws ParseException
  {
    queryGrammar parser = new queryGrammar(System.in);
    parser.Start(new Vector<String>(), new StringBuilder(), new StringBuilder(), new Vector<String>(), new StringBuilder(),
                                        new StringBuilder());
  }

  final public void Start(Vector<String> sV, StringBuilder iS, StringBuilder pS, Vector<String> pV,
                        StringBuilder wS, StringBuilder wT) throws ParseException {
    selectVector = sV; inputStream = iS; patternString = pS; predVector = pV; windowSize = wS; windowType = wT;
    query();
    jj_consume_token(0);
  }

  final public void query() throws ParseException {
    jj_consume_token(SELECT);
    selectExp();
    jj_consume_token(FROM);
    fromExp();
    jj_consume_token(AS);
    jj_consume_token(PATTERN);
    patternExp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      whereExp();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITHIN:
      jj_consume_token(WITHIN);
      withinExp();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void selectExp() throws ParseException {
  String s = "";
  Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        t = jj_consume_token(CONSTANT);
                       s = s + t.image;
        break;
      case DIGIT:
        t = jj_consume_token(DIGIT);
                                                                s = s + t.image;
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
       selectVector.add(s);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
                   s = "";
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANT:
          t = jj_consume_token(CONSTANT);
                       s = s + t.image;
          break;
        case DIGIT:
          t = jj_consume_token(DIGIT);
                                                                s = s + t.image;
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
        case CONSTANT:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
      }
            selectVector.add(s);
    }
  }

  final public void fromExp() throws ParseException {
  String s = "";
  Token t = null;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        t = jj_consume_token(CONSTANT);
                       s = s + t.image;
        break;
      case DIGIT:
        t = jj_consume_token(DIGIT);
                                                            s = s + t.image;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
     inputStream.replace(0, inputStream.length(), s);
  }

  final public void patternExp() throws ParseException {
  String s = "";
  Token t = null;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case CONSTANT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANT:
          t = jj_consume_token(CONSTANT);
                         s = s + t.image;
          break;
        case DIGIT:
          t = jj_consume_token(DIGIT);
                                                              s = s + t.image;
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case COMMA:
        t = jj_consume_token(COMMA);
                                                                                                       s = s + t.image;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case CONSTANT:
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
    }
     patternString.replace(0, patternString.length(), s);
  }

  final public void whereExp() throws ParseException {
  String s1 = "", s2 = "", s3 = "";
  Token t = null;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        t = jj_consume_token(CONSTANT);
                         s1 = s1 + t.image;
        break;
      case DIGIT:
        t = jj_consume_token(DIGIT);
                                                                    s1 = s1 + t.image;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case NEQ:
      t = jj_consume_token(NEQ);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case LT:
      t = jj_consume_token(LT);
      break;
    case GEQ:
      t = jj_consume_token(GEQ);
      break;
    case LEQ:
      t = jj_consume_token(LEQ);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                 s2 = t.image;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        t = jj_consume_token(CONSTANT);
                         s3 = s3 + t.image;
        break;
      case DIGIT:
        t = jj_consume_token(DIGIT);
                                                                    s3 = s3 + t.image;
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
    }
    predVector.add (s1 + " " + s2 + " " + s3);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(AND);
               s1 = ""; s2 = ""; s3 = "";
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANT:
          t = jj_consume_token(CONSTANT);
                      s1 = s1 + t.image;
          break;
        case DIGIT:
          t = jj_consume_token(DIGIT);
                                                               s1 = s1 + t.image;
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
        case CONSTANT:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_9;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NEQ:
        t = jj_consume_token(NEQ);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LT:
        t = jj_consume_token(LT);
        break;
      case GEQ:
        t = jj_consume_token(GEQ);
        break;
      case LEQ:
        t = jj_consume_token(LEQ);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                 s2 = t.image;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANT:
          t = jj_consume_token(CONSTANT);
                      s3 = s3 + t.image;
          break;
        case DIGIT:
          t = jj_consume_token(DIGIT);
                                                               s3 = s3 + t.image;
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIGIT:
        case CONSTANT:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
      }
    predVector.add (s1 + " " + s2 + " " + s3);
    }
  }

  final public void withinExp() throws ParseException {
        String num = "";
        String type = "";
        Token t = null;
    label_11:
    while (true) {
      t = jj_consume_token(DIGIT);
                   num = num + t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
    }
    label_12:
    while (true) {
      t = jj_consume_token(CONSTANT);
                      type = type + t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_12;
      }
    }
    windowSize.replace(0, windowSize.length(), num); windowType.replace(0, windowType.length(), type);
  }

  /** Generated Token Manager. */
  public queryGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x800,0x6000,0x6000,0x200000,0x6000,0x6000,0x6000,0x6000,0x6000,0x206000,0x206000,0x6000,0x6000,0x1f8000,0x6000,0x6000,0x1000,0x6000,0x6000,0x1f8000,0x6000,0x6000,0x2000,0x4000,};
   }

  /** Constructor with InputStream. */
  public queryGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public queryGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new queryGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public queryGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new queryGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public queryGrammar(queryGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(queryGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
